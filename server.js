// Original imports
const bodyParser = require('body-parser')
const cors = require('cors')
const cloudinary = require('cloudinary')
const cloudinaryConfig = require('./config/cloudinary')
const dbConfig = require('./config/db')
const passport = require('passport')
const sslRedirect = require('heroku-ssl-redirect')
const sm = require('sitemap')
//

const fs = require('fs')
const path = require('path')
const express = require('express')
const resolve = file => path.resolve(__dirname, file)

const isProd = process.env.NODE_ENV === 'production'

const app = express()

if (isProd) {
  app.use(sslRedirect())
}

app.use(bodyParser.json())
app.use(cors())
  
app.use(passport.initialize())
app.use(passport.session())
require('./config/passport')(passport)

cloudinary.config(cloudinaryConfig)
//

//Original connection
var mongoose = require('mongoose')
mongoose.connect(dbConfig.url)
var db = mongoose.connection
db.on("error", console.error.bind(console, "connection error"))
db.once("open", function(callback){
  console.log("Connection Succeeded")
})
//

let renderer
if (isProd) {
  // In production: create server renderer using server bundle and index HTML
  // template from real fs.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-bundle.json')
  // src/index.template.html is processed by html-webpack-plugin to inject
  // build assets and output as dist/index.html.
  const template = fs.readFileSync(resolve('./dist/index.html'), 'utf-8')
  renderer = createRenderer(bundle, template)
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  require('./build/dev-server')(app, (bundle, template) => {
    renderer = createRenderer(bundle, template)
  })
}

function createRenderer (bundle, template) {
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    template,
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

//Sitemap config
sitemap = sm.createSitemap ({
  hostname: 'https:/alf-israel.com',
  cacheTime: 600000,        // 600 sec - cache purge period 
  urls: [
    { url: 'https://www.alf-israel.com/', priority: 1.00 },
    { url: 'https://www.alf-israel.com/About', priority: 0.80 },
    { url: 'https://www.alf-israel.com/events', priority: 0.80 },
    { url: 'https://www.alf-israel.com/articles', priority: 0.80 },
    { url: 'https://www.alf-israel.com/investigations', priority: 0.80 },
    { url: 'https://www.alf-israel.com/contact', priority: 0.80 }
  ]
})

app.use('/dist', serve('./dist', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

//Sitemap route
app.get('/sitemap.xml', function(req, res) {
  sitemap.toXML( function (err, xml) {
      if (err) {
        return res.status(500).end()
      }
      res.header('Content-Type', 'application/xml')
      res.send( xml )
  })
})

// Original robots
app.get('/robots.txt', function (req, res) {
  res.type('text/plain')
  res.send("User-agent: *\nDisallow: /admin")
})
//

// Original routes
require('./routes')(app, db)
///

app.get('*', (req, res) => {
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  const s = Date.now()

  res.setHeader("Content-Type", "text/html")

  const errorHandler = err => {
    if (err && err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err)
    }
  }

  renderer.renderToStream({ url: req.url })
    .on('error', errorHandler)
    .on('end', () => console.log(`whole request: ${Date.now() - s}ms`))
    .pipe(res)
})

const port = process.env.PORT || 3000
app.listen(port, () => {
  console.log(`server started at http://localhost:${port}`)
})
